#!/usr/bin/env node
'use strict';
const meow = require('meow');
const Conf = require('conf');
const path = require('path');
const logSymbols = require('log-symbols');
const fs = require('fs');
const ignoreCase = require('ignore-case');
const editorSpecific = require('./resources.js').editorSpecific;
const global = require('./resources.js').global;

const cli = meow(
  `
Usage
    $ giignore [inputs] [options]
    
	Example
	  $ giignore wordpress java --path=C:/output 
  
    Options
    --path, -p   use  output directory `,
  {
    flags: {
      path: {
        type: 'string',
        alias: 'p'
      }
    }
  }
);
const config = new Conf({
  defaults: {
    path: '.'
  }
});

const { flags } = cli;
config.set('path', __dirname);
if (typeof flags.path === 'string') {
  if (!fs.existsSync(flags.path)) {
    console.error(`${logSymbols.error} ${flags.path} does not exist `);
    process.exit(1);
  }
  config.set('path', flags.path);
}

var readJson = (path, cb) => {
  fs.readFile(require.resolve(path), (err, data) => {
    if (err) cb(err);
    else cb(null, JSON.parse(data));
  });
};
function generate(listignore) {
  var _data = '';
  readJson('../fixture/lang.json', (opt, data) => {
    listignore.forEach(element => {
      Object.keys(data).forEach(key => {
        if (ignoreCase.equals(key, element)) {
          _data = _data + data[key] + '\n';
        }
      });
    });

    fs.writeFileSync(path.resolve(config.get('path') + '/.gitignore'), _data, 'utf8');
    console.error(`${logSymbols.success} .gitigonre generated successfully `);
  });
}

function handle() {
  var inputs = [];
  cli.input.forEach(i => {
    if (!editorSpecific.includes(i) && !global.includes(i)) {
      console.log(
        `${
          logSymbols.error
        } ${i} does not exist check full list with on https://github.com/alpacioDev/giignore `
      );
      process.exit(1);
    }
    inputs.push(i);
  });
  generate(inputs);
}
handle();
